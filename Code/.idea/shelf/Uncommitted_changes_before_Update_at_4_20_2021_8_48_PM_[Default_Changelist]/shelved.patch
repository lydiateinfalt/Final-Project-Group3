Index: Main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Group 3 DATS 6103\r\n# DATS 6103 Spring21\r\n# Arianna Dunham, RyeAnne Ricker, Lydia Teinfalt\r\n#%%-----------------------------------------------------------------------\r\n\r\nimport sys\r\n#from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QPushButton, QAction, QComboBox, QLabel, QGridLayout, QCheckBox, QGroupBox\r\nfrom PyQt5.QtWidgets import (QMainWindow, QApplication, QWidget, QPushButton, QAction, QComboBox, QLabel,\r\n                             QGridLayout, QCheckBox, QGroupBox, QVBoxLayout, QHBoxLayout, QLineEdit, QPlainTextEdit, QTableWidget, QTableWidgetItem)\r\n\r\nfrom PyQt5.QtGui import QIcon\r\nfrom PyQt5.QtCore import pyqtSlot\r\nfrom PyQt5.QtCore import pyqtSignal\r\nfrom PyQt5.QtCore import Qt\r\nimport scipy\r\nfrom itertools import cycle\r\n\r\n\r\nfrom PyQt5.QtWidgets import QDialog, QVBoxLayout, QSizePolicy, QMessageBox\r\n\r\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\r\nfrom matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar\r\nfrom matplotlib.figure import Figure\r\n\r\nimport seaborn as sns\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom numpy.polynomial.polynomial import polyfit\r\n\r\nfrom sklearn.preprocessing import LabelEncoder\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nfrom sklearn.metrics import accuracy_score\r\nfrom sklearn.metrics import classification_report\r\nfrom sklearn.metrics import confusion_matrix\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import roc_auc_score\r\nfrom sklearn.metrics import roc_curve, auc\r\nfrom sklearn.preprocessing import label_binarize\r\n\r\n# Libraries to display decision tree\r\n#from pydotplus import graph_from_dot_data\r\nfrom sklearn.tree import export_graphviz\r\nimport webbrowser\r\n\r\nimport warnings\r\nwarnings.filterwarnings(\"ignore\")\r\nimport matplotlib.pyplot as plt\r\nimport random\r\nimport seaborn as sns\r\n\r\n#%%-----------------------------------------------------------------------\r\nimport os\r\nos.environ[\"PATH\"] += os.pathsep + 'C:\\\\Program Files (x86)\\\\graphviz-2.38\\\\release\\\\bin'\r\n#%%-----------------------------------------------------------------------\r\n\r\n\r\n#::--------------------------------\r\n# Deafault font size for all the windows\r\n#::--------------------------------\r\nfont_size_window = 'font-size:15px'\r\n\r\nclass PlotCanvas(FigureCanvas):\r\n    #::----------------------------------------------------------\r\n    # creates a figure on the canvas\r\n    # later on this element will be used to draw a histogram graph\r\n    #::----------------------------------------------------------\r\n    def __init__(self, parent=None, width=7, height=6, dpi=100):\r\n        fig = Figure(figsize=(width, height), dpi=dpi)\r\n\r\n        FigureCanvas.__init__(self, fig)\r\n        self.setParent(parent)\r\n\r\n        FigureCanvas.setSizePolicy(self,\r\n                                   QSizePolicy.Expanding,\r\n                                   QSizePolicy.Expanding)\r\n        FigureCanvas.updateGeometry(self)\r\n\r\n    def plot(self):\r\n        self.ax = self.figure.add_subplot(111)\r\n\r\nclass CanvasWindow(QMainWindow):\r\n    #::----------------------------------\r\n    # Creates a canvas containing the plot for the initial analysis\r\n    #;;----------------------------------\r\n    def __init__(self, parent=None):\r\n        super(CanvasWindow, self).__init__(parent)\r\n\r\n        self.left = 200\r\n        self.top = 200\r\n        self.Title = 'DC Crashes Fatal/Major Injuries'\r\n        self.width = 500\r\n        self.height = 500\r\n        self.initUI()\r\n\r\n    def initUI(self):\r\n\r\n        self.setWindowTitle(self.Title)\r\n        self.setStyleSheet(font_size_window)\r\n\r\n        self.setGeometry(self.left, self.top, self.width, self.height)\r\n\r\n        self.m = PlotCanvas(self, width=5, height=4)\r\n        self.m.move(0, 30)\r\n\r\nclass Canvas(QMainWindow):\r\n    #::----------------------------------\r\n    # Creates a canvas containing the plot for the initial analysis\r\n    #;;----------------------------------\r\n    def __init__(self, parent=None):\r\n        super(Canvas, self).__init__(parent)\r\n\r\n        self.left = 200\r\n        self.top = 200\r\n        self.Title = 'DC Crashes Fatal/Major Injuries'\r\n        self.width = 500\r\n        self.height = 500\r\n        self.initUI()\r\n\r\n    def initUI(self):\r\n\r\n        self.setWindowTitle(self.Title)\r\n        self.setStyleSheet(font_size_window)\r\n\r\n        self.setGeometry(self.left, self.top, self.width, self.height)\r\n\r\n        self.s = PlotCanvas(self, width=5, height=4)\r\n        self.s.move(0, 30)\r\n\r\nclass DataTable(QMainWindow):\r\n        def __init__(self, parent=None):\r\n            super(DataTable, self).__init__(parent)\r\n\r\n            self.left = 500\r\n            self.top = 500\r\n            self.Title = 'DC Crash Data'\r\n            self.width = 1000\r\n            self.height = 500\r\n            self.initUI()\r\n\r\n        def initUI(self):\r\n            self.t = QTableWidget()\r\n            self.t.setStyleSheet(font_size_window)\r\n            self.t.setGeometry(self.left, self.top, self.width, self.height)\r\n            self.t.setWindowTitle(self.Title)\r\n            self.t.move(0, 30)\r\n\r\n\r\nclass App(QMainWindow):\r\n    #::-------------------------------------------------------\r\n    # This class creates all the elements of the application\r\n    #::-------------------------------------------------------\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.left = 100\r\n        self.top = 100\r\n        self.Title = 'DC Crash Data'\r\n        self.width = 500\r\n        self.height = 500\r\n        self.initUI()\r\n\r\n    def initUI(self):\r\n        #::-------------------------------------------------\r\n        # Creates the manu and the items\r\n        #::-------------------------------------------------\r\n        self.setWindowTitle(self.Title)\r\n        self.setGeometry(self.left, self.top, self.width, self.height)\r\n\r\n        #::-----------------------------\r\n        # Create the menu bar\r\n        #::-----------------------------\r\n        mainMenu = self.menuBar()\r\n        mainMenu.setStyleSheet('background-color: lightblue')\r\n\r\n        fileMenu = mainMenu.addMenu('File')\r\n        DataMenu = mainMenu.addMenu('Data')\r\n        EDAMenu = mainMenu.addMenu('EDA')\r\n        MLModelMenu = mainMenu.addMenu('ML Models')\r\n\r\n        #::--------------------------------------\r\n        # Exit application\r\n        # Creates the actions for the fileMenu item\r\n        #::--------------------------------------\r\n\r\n        exitButton = QAction(QIcon('enter.png'), 'Exit', self)\r\n        exitButton.setShortcut('Ctrl+Q')\r\n        exitButton.setStatusTip('Exit application')\r\n        exitButton.triggered.connect(self.close)\r\n\r\n        fileMenu.addAction(exitButton)\r\n\r\n        #::----------------------------------------\r\n        # EDA analysis\r\n        # Creates the actions for the EDA Analysis item\r\n        # Initial Assesment : Histogram about the level of happiness in 2017\r\n        # Happiness Final : Presents the correlation between the index of happiness and a feature from the datasets.\r\n        # Correlation Plot : Correlation plot using all the dims in the datasets\r\n        #::----------------------------------------\r\n\r\n        DataButton = QAction(QIcon(),'Sample ', self)\r\n        DataButton.setStatusTip('Sample data')\r\n        DataButton.triggered.connect(self.Data1)\r\n        DataMenu.addAction(DataButton)\r\n\r\n        #::----------------------------------------\r\n        # EDA analysis\r\n        # Creates the actions for the EDA Analysis item\r\n        # Initial Assesment : Histogram about the level of happiness in 2017\r\n        # Happiness Final : Presents the correlation between the index of happiness and a feature from the datasets.\r\n        # Correlation Plot : Correlation plot using all the dims in the datasets\r\n        #::----------------------------------------\r\n\r\n        EDA1Button = QAction(QIcon(),'Histogram', self)\r\n        EDA1Button.setStatusTip('Presents the initial datasets')\r\n        EDA1Button.triggered.connect(self.EDA1)\r\n        EDAMenu.addAction(EDA1Button)\r\n\r\n        EDA2Button = QAction(QIcon(),'Bar chart', self)\r\n        EDA2Button.setStatusTip('Person type')\r\n        EDA2Button.triggered.connect(self.EDA2)\r\n        EDAMenu.addAction(EDA2Button)\r\n\r\n        #::--------------------------------------------------\r\n        # ML Models for prediction\r\n        # There are three models\r\n        #       SVM\r\n        #       XGBoost\r\n        #       Random Forest\r\n        #::--------------------------------------------------\r\n        # Decision Tree Model\r\n        #::--------------------------------------------------\r\n        MLModel1Button =  QAction(QIcon(), 'SVM', self)\r\n        MLModel1Button.setStatusTip('SVM')\r\n        MLModel1Button.triggered.connect(self.SVM)\r\n\r\n        #::------------------------------------------------------\r\n        # Random Forest Classifier\r\n        #::------------------------------------------------------\r\n        MLModel2Button = QAction(QIcon(), 'Random Forest Classifier', self)\r\n        MLModel2Button.setStatusTip('Random Forest Classifier ')\r\n        MLModel2Button.triggered.connect(self.MLRF)\r\n\r\n        MLModelMenu.addAction(MLModel1Button)\r\n        MLModelMenu.addAction(MLModel2Button)\r\n\r\n        #::------------------------------------------------------\r\n        # Random Forest Classifier\r\n        #::------------------------------------------------------\r\n        MLModel2Button = QAction(QIcon(), 'Random Forest Classifier', self)\r\n        MLModel2Button.setStatusTip('Random Forest Classifier ')\r\n        MLModel2Button.triggered.connect(self.MLRF)\r\n\r\n        MLModelMenu.addAction(MLModel1Button)\r\n        MLModelMenu.addAction(MLModel2Button)\r\n\r\n        self.dialogs = list()\r\n\r\n    # Reference: https://pythonspot.com/pyqt5-table/\r\n    def Data1(self):\r\n        dialog = DataTable(self)\r\n        #dialog.t.setWindowTitle('DC Crash Data')\r\n        # Set number of rows\r\n        dialog.t.setRowCount(top_10.shape[0])\r\n        num_cols = len(features_list)\r\n        dialog.t.setColumnCount(num_cols)\r\n\r\n        # Set column headings\r\n        for i in range(0,num_cols):\r\n            dialog.t.setItem(0, i, QTableWidgetItem(features_list[i]))\r\n\r\n        # Read in data\r\n        for i in range(0,5):\r\n            for k in range(1, num_cols+1):\r\n                dialog.t.setItem(i+1,k-1,QTableWidgetItem(str(top_10.iloc[i][k])))\r\n\r\n        dialog.t.horizontalHeader().setStretchLastSection(True)\r\n        dialog.t.verticalHeader().setStretchLastSection(True)\r\n        dialog.t.show()\r\n\r\n    def EDA1(self):\r\n        #::------------------------------------------------------\r\n        # Creates the histogram\r\n        # The X variable contains Age\r\n        # X was populated in the method crash_data\r\n        # at the start of the application\r\n        #::------------------------------------------------------\r\n        dialog = CanvasWindow(self)\r\n        dialog.m.plot()\r\n        dialog.m.ax.hist(X, bins=25, facecolor=\"skyblue\", alpha=0.5, edgecolor=\"black\", linewidth = 1.1)\r\n        dialog.m.ax.set_title('Age of People Involved in Traffic Accidents with Fatalities or Major Injuries')\r\n        dialog.m.ax.set_xlabel(\"Age of Person(s) Involved\")\r\n        dialog.m.ax.set_ylabel(\"Number Fatal/Major Injuries Accidents\")\r\n        dialog.m.ax.axis([0, 100, 0, 1400])\r\n        dialog.m.ax.grid(True)\r\n        dialog.m.draw()\r\n        self.dialogs.append(dialog)\r\n        dialog.show()\r\n\r\n    def EDA2(self):\r\n        #::---------------------------------------------------------\r\n        # This function create bar plot of persons injured by transportation mode\r\n        #::---------------------------------------------------------\r\n        dialog1 = Canvas(self)\r\n        dialog1.s.plot()\r\n        x=fatal_mode.COUNT.tolist()\r\n        y=fatal_mode.index.tolist()\r\n        dialog1.s.ax.bar(y,x, color=['b', 'g', 'm', 'r'])\r\n        dialog1.s.ax.set_title('Persons in Fatal/Major Injury DC Crashes by Mode')\r\n        dialog1.s.ax.set_ylabel(\"\")\r\n        dialog1.s.draw()\r\n        self.dialogs.append(dialog1)\r\n        dialog1.show()\r\n\r\n    def EDA4(self):\r\n        #::----------------------------------------------------------\r\n        # This function creates an instance of the CorrelationPlot class\r\n        #::----------------------------------------------------------\r\n        dialog = ()\r\n        self.dialogs.append(dialog)\r\n        dialog.show()\r\n\r\n    def SVM(self):\r\n        #::-----------------------------------------------------------\r\n        # This function creates an instance of the DecisionTree class\r\n        # This class presents a dashboard for a Decision Tree Algorithm\r\n        # using the happiness dataset\r\n        #::-----------------------------------------------------------\r\n        dialog = ()\r\n        self.dialogs.append(dialog)\r\n        dialog.show()\r\n\r\n    def MLRF(self):\r\n        #::-------------------------------------------------------------\r\n        # This function creates an instance of the Random Forest Classifier Algorithm\r\n        # using the happiness dataset\r\n        #::-------------------------------------------------------------\r\n        dialog = ()\r\n        self.dialogs.append(dialog)\r\n        dialog.show()\r\n\r\ndef main():\r\n    #::-------------------------------------------------\r\n    # Initiates the application\r\n    #::-------------------------------------------------\r\n    app = QApplication(sys.argv)\r\n    app.setStyle('Fusion')\r\n    ex = App()\r\n    ex.show()\r\n    sys.exit(app.exec_())\r\n\r\n\r\ndef crash_data():\r\n    #::--------------------------------------------------\r\n    # Loads the crash.csv file created from readdata.py\r\n    #\r\n    #::--------------------------------------------------\r\n    global X\r\n    global y\r\n    global features_list\r\n    global class_names\r\n    global top_10\r\n    global fatal_mode\r\n    crash = pd.read_csv('crash.csv')\r\n    fatal_crash =crash[crash.FATALMAJORINJURIES.eq(1.0)]\r\n    fatal_crash.dropna(inplace=True)\r\n    X=pd.Series(fatal_crash['AGE'])\r\n    X.dropna(inplace=True)\r\n    top_10=fatal_crash.head()\r\n    y = crash[\"FATALMAJORINJURIES\"]\r\n    fatal_mode = fatal_crash.groupby('PERSONTYPE').agg({'PERSONTYPE': 'count'})\r\n    fatal_mode = pd.DataFrame(data=fatal_mode)\r\n    fatal_mode.rename(columns={'PERSONTYPE': 'COUNT'}, inplace=True)\r\n    fatal_mode.sort_values(by=['COUNT'], inplace=True)\r\n    features_list = ['PERSONID', 'PERSONTYPE', 'AGE', 'FATAL', 'MAJORINJURY', 'MINORINJURY', 'INVEHICLETYPE', 'TICKETISSUED', 'LICENSEPLATESTATE', 'IMPAIRED', 'SPEEDING']\r\n    class_names = ['FATAL', 'NOT FATAL']\r\n\r\n\r\nif __name__ == '__main__':\r\n    #::------------------------------------\r\n    # First reads the data then calls for the application\r\n    #::------------------------------------\r\n    crash_data()\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.py b/Main.py
--- a/Main.py	(revision 66317a914096240df489df8fef18c61e669a92bd)
+++ b/Main.py	(date 1618966077030)
@@ -183,7 +183,7 @@
         # Creates the actions for the fileMenu item
         #::--------------------------------------
 
-        exitButton = QAction(QIcon('enter.png'), 'Exit', self)
+        exitButton = QAction(QIcon('enter.png'), '&Quit', self)
         exitButton.setShortcut('Ctrl+Q')
         exitButton.setStatusTip('Exit application')
         exitButton.triggered.connect(self.close)
Index: readdata.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport numpy as np\r\n\r\n# Crashes reported in DC\r\n# Reference: https://opendata.dc.gov/datasets/crash-details-table\r\ncrash = pd.read_csv(\"Crash_Details_Table.csv\")\r\n# Analysis of each data set\r\nprint(\"Original data set\")\r\nprint(\"Total number of rows in data set: \", crash.shape[0])\r\nprint(\"Total number of columns in data set:\", crash.shape[1])\r\n\r\ncrash = pd.DataFrame(crash, columns=['PERSONID', 'PERSONTYPE', 'AGE', 'FATAL', 'MAJORINJURY', 'MINORINJURY', 'INVEHICLETYPE', 'TICKETISSUED', 'LICENSEPLATESTATE', 'IMPAIRED', 'SPEEDING'])\r\nprint(\"Selecting columns from data set\")\r\nprint(\"Total number of rows in data set: \", crash.shape[0])\r\nprint(\"Total number of columns in data set:\", crash.shape[1])\r\n\r\ncrash['FATALMAJORINJURIES'] = np.where((crash['FATAL'].eq('Y') | crash['MAJORINJURY'].eq('Y')),1,0)\r\nprint(\"Adding new column FATALMAJORINJURIES\")\r\nprint(\"Total number of rows in data set: \", crash.shape[0])\r\nprint(\"Total number of columns in data set:\", crash.shape[1])\r\n\r\n\r\nprint(\"Dataset first few rows:\\n \")\r\nprint(crash.head())\r\n\r\nprint ('-'*80 + '\\n')\r\n\r\n# printing the structure of the dataset\r\nprint(\"Dataset info:\\n \")\r\nprint(crash.info())\r\nprint ('-'*80 + '\\n')\r\n# printing the summary statistics of the dataset\r\nprint(crash.describe(include='all'))\r\nprint ('-'*80 + '\\n')\r\nprint(\"Fatal crashes\")\r\nprint(crash[crash['FATAL'] == 'Y'])\r\ncrash.to_csv(\"crash.csv\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/readdata.py b/readdata.py
--- a/readdata.py	(revision 66317a914096240df489df8fef18c61e669a92bd)
+++ b/readdata.py	(date 1618965465858)
@@ -18,6 +18,9 @@
 print("Adding new column FATALMAJORINJURIES")
 print("Total number of rows in data set: ", crash.shape[0])
 print("Total number of columns in data set:", crash.shape[1])
+fatal_crash=crash[crash.FATALMAJORINJURIES.eq(1.0)]
+print("Total number observations with FATALMAJORINJURES", fatal_crash.shape[0])
+print("Percentage of FATAL crashes", (fatal_crash.shape[0]/crash.shape[0]*100))
 
 
 print("Dataset first few rows:\n ")
Index: BoostedDT.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># RR\r\nimport webbrowser\r\n\r\nfrom sklearn.tree import export_graphviz\r\n\r\nimport Preprocessing\r\nfrom sklearn.model_selection import GridSearchCV\r\nfrom sklearn.model_selection import StratifiedShuffleSplit\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import accuracy_score\r\nfrom sklearn.metrics import confusion_matrix\r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nfrom sklearn.ensemble import GradientBoostingClassifier\r\nfrom sklearn.metrics import roc_auc_score\r\n#import xgboost as xgb\r\n\r\n#%%-----------------------------------------------------------------------\r\nimport os\r\nos.environ[\"PATH\"] += os.pathsep + 'C:\\Program Files (x86)\\Graphviz\\bin'\r\n#%%-----------------------------------------------------------------------\r\nfrom pydotplus import graph_from_dot_data\r\nmodel = Preprocessing.crash_model\r\n\r\n\r\nclass gboost:  # class\r\n    def __init__(self, data):  # to call self\r\n        # data is the entire data matrix\r\n        self.xtrain = data.iloc[:,:-1]\r\n        self.ytrain = data.iloc[:,-1]\r\n\r\n\r\n    def accuracy(self):  # this makes the model and finds the accuracy, confusion matrix, and prints the decision tree\r\n        # 13 lines of code - 4 copied, 1 modified, 9 myself\r\n        clf = xgb.XGBClassifier(n_estimators=500, # these are the parameters - were adjusted\r\n                                learning_rate=0.01,\r\n                                max_depth=10,\r\n                                min_samples_split=2,\r\n                                min_samples_leaf=1,\r\n                                #warm_start=True,\r\n                                reg_lambda = 10,\r\n                                reg_alpha = 10\r\n                                       )\r\n        X_train, X_test, y_train, y_test = train_test_split(self.xtrain, self.ytrain, test_size=0.3, random_state=100) # split data up\r\n        clf.fit(X_train, y_train) # fit model to training data\r\n        y_pred = clf.predict(X_test)  # predict testing data\r\n        self.roc = roc_auc_score(y_test, clf.predict_proba(X_test)[:, 1]) # get AUC value\r\n        self.acc = accuracy_score(y_test, y_pred) * 100  # get the accuracy of the model\r\n        print('The AUC of the model is:', self.roc)\r\n        print('The classification accuracy is:', self.acc)\r\n\r\n        # Dr. Jafari code - 3 copied, not modified\r\n        conf_matrix = confusion_matrix(y_test, y_pred) # make confusion matrix\r\n        class_names = self.ytrain.unique()  # get the class names\r\n        df_cm = pd.DataFrame(conf_matrix, index=class_names, columns=class_names)\r\n\r\n        # sensitivity and specificity - 4 copied and modified RR\r\n        sensitivity = conf_matrix[0, 0] / (conf_matrix[0, 0] + conf_matrix[0, 1])  # calculate sensitivity\r\n        print('Sensitivity : ', sensitivity)\r\n        specificity = conf_matrix[1, 1] / (conf_matrix[1, 0] + conf_matrix[1, 1])  # calculate specificity\r\n        print('Specificity : ', specificity)\r\n\r\n        # Dr. Jafari Code - 9 copied, not modified, 1 line myself\r\n        plt.figure(figsize=(5, 5))\r\n        hm = sns.heatmap(df_cm, cbar=False, annot=True, square=True, fmt='d', annot_kws={'size': 20},\r\n                         yticklabels=df_cm.columns, xticklabels=df_cm.columns)\r\n        hm.yaxis.set_ticklabels(hm.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=20)\r\n        hm.xaxis.set_ticklabels(hm.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=20)\r\n        plt.ylabel('True label', fontsize=20)\r\n        plt.xlabel('Predicted label', fontsize=20)\r\n        plt.title('Extreme Gradient Boosted DT Confusion Matrix')\r\n        plt.tight_layout()\r\n        plt.show()\r\n\r\n        # Dr. Jafari - 5 lines copied not modified\r\n        # dot_data = export_graphviz(clf, filled=True, rounded=True, class_names=class_names,\r\n        #                            feature_names=self.xtrain.iloc[:, :].columns, out_file=None)\r\n        #\r\n        # graph = graph_from_dot_data(dot_data)\r\n        # graph.write_pdf(\"GBoost Decision Tree\")\r\n        # webbrowser.open_new(r'GBoost Decision Tree')\r\n\r\n        # 1 line myself\r\n        return self.roc  # return the accuracy\r\n\r\n# 2 lines myself\r\nm = gboost(model) # put model into class\r\nm.accuracy() # run
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoostedDT.py b/BoostedDT.py
--- a/BoostedDT.py	(revision 66317a914096240df489df8fef18c61e669a92bd)
+++ b/BoostedDT.py	(date 1618870296487)
@@ -14,7 +14,7 @@
 import pandas as pd
 from sklearn.ensemble import GradientBoostingClassifier
 from sklearn.metrics import roc_auc_score
-#import xgboost as xgb
+import xgboost as xgb
 
 #%%-----------------------------------------------------------------------
 import os
