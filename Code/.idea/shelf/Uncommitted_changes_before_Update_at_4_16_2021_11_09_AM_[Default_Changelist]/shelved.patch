Index: eda.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># DC Crash Data EDA\r\n# Group 3: Arianna Dunham, RyeAnne Ricker, Lydia Teinfalt\r\n\r\n# import libraries\r\nimport readdata\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport geopandas as gpd\r\n#from shapely.geometry import Point, Polygon\r\n#from scipy import stats\r\n#import researchpy as rp\r\nimport seaborn as sb\r\nimport seaborn as sns\r\n\r\n# to call from my directory RR 2 lines, 2 myself\r\n#crash = pd.read_csv('/Users/RyeAnne/Documents/School/Spring2021/DataMining/Group Project/crash_ver1.csv') # load data\r\n# may use the following line to call it from class instead\r\ncrash = readdata.crash\r\nprint(crash.columns)\r\n\r\n### ------------------------------------------------------------------------------------------\r\n###\r\n### This part displays histograms of crashes by year and month\r\n###\r\n\r\n# convert to datetime - RR 1 copied  - unnecessary due to Lydias conversion\r\n#crash[\"REPORTDATE\"] = crash[\"REPORTDATE\"].astype(\"datetime64\")\r\n\r\n# This one is unneeded since Lydia converted the date to columns of year and month\r\n# Plot crashes by year - RR 10 copied, 5 modified\r\n#fig, ax = plt.subplots()\r\n#crash[\"REPORTDATE\"].dt.year.astype(np.int64).plot.hist(ax=ax, bins = [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025], edgecolor='black')\r\n#plt.xlim(xmin=2000, xmax = 2025)\r\n#labels = ax.get_xticks().tolist()\r\n#labels = pd.to_datetime(labels)\r\n#ax.set_xticklabels(labels, rotation=90)\r\n#ax.set_xlabel(\"Year\")\r\n#ax.set_ylabel(\"Number of Crashes\")\r\n#ax.set_title('Crashes by Year')\r\n#plt.show()\r\n\r\n# Use this to make sure you incorporate all years contained within the data  and to check for any oddities\r\n# Get the total number of crashes per year, visually - RR 6 lines, 6 myself\r\n# year_counts = crash[\"MONTH\"].value_counts() # get total counts of fatal/majorinjury and none/minorinjury\r\n# year_proportions = crash[\"MONTH\"].value_counts(normalize=True)  # get the proportions\r\n# print('The number of crashes in DC per month are:')\r\n# print(year_counts)  # print total numbers\r\n# print('The proportion of crashes in DC by month are:')\r\n# print(year_proportions)  # print proportions\r\n#\r\n# # Plot crashes by year - RR 4 copied, 4 modified, 3 my own\r\n# year_count = sns.countplot(data=crash, x='YEAR', hue='FATALMAJORINJURIES', dodge=False, palette=\"Paired\")\r\n# year_count.set_xticklabels(year_count.get_xticklabels(), rotation=70)\r\n# year_count.set_xlabel(\"Year\")\r\n# year_count.set_ylabel(\"Number of Crashes\")\r\n# year_count.set_title('Crashes by Year')\r\n# year_count.legend(bbox_to_anchor=(0.1, 0.9), loc=2, borderaxespad=0.)\r\n# plt.show()\r\n#\r\n# # Use this to make sure you incorporate all months contained within the data  and to check for any oddities\r\n# # Get the total number of crashes per year, visually - RR 6 lines, 6 myself\r\n# year_counts = crash[\"MONTH\"].value_counts() # get total counts of fatal/majorinjury and none/minorinjury\r\n# year_proportions = crash[\"MONTH\"].value_counts(normalize=True)  # get the proportions\r\n# print('The number of crashes in DC per month are:')\r\n# print(year_counts)  # print total numbers\r\n# print('The proportion of crashes in DC by month are:')\r\n# print(year_proportions)  # print proportions\r\n#\r\n# # Plot crashes by month - RR 4 copied, 4 modified, 3 my own\r\n# month_count = sns.countplot(data=crash, x='MONTH', hue='FATALMAJORINJURIES', dodge=False,palette=\"Paired\")\r\n# month_count.set_xticklabels(month_count.get_xticklabels(), rotation=70)\r\n# month_count.set_xlabel(\"Month\")\r\n# month_count.set_ylabel(\"Number of Crashes\")\r\n# month_count.set_title('Crashes by Month')\r\n# month_count.legend(bbox_to_anchor=(0.95, 1), loc=2, borderaxespad=0.)\r\n# plt.show()\r\n\r\n# Citation: \"Visualizing Distributions of Data\". Seaborn. [Accesed Online: Mar 25, 2021]. https://seaborn.pydata.org/tutorial/distributions.html\r\n\r\n\r\n# Heatmap of crashes - LNT\r\n# Reference: https://towardsdatascience.com/heatmap-basics-with-pythons-seaborn-fb92ea280a6c\r\n# df = pd.DataFrame(crash, columns=['REPORTDATE','FATALMAJORINJURIES'])\r\n# df['REPORTDATE'] = pd.to_datetime(df['REPORTDATE'])\r\n# df.set_index(['REPORTDATE'], inplace=True)\r\n# df = df[df.FATALMAJORINJURIES == 1]\r\n# df['MONTH'] = [i.month for i in df.index]\r\n# df['YEAR'] = [i.year for i in df.index]\r\n# # group by month and year\r\n# df = df.groupby(['MONTH', 'YEAR']).count()\r\n# df = df.unstack(level=0)\r\n#\r\n# fig, ax = plt.subplots(figsize=(11, 9))\r\n# sb.heatmap(df,cmap=\"Blues\",linewidth=0.3)\r\n#\r\n# ax.xaxis.tick_top()\r\n# labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n#                 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n# plt.xticks(np.arange(12) + .5, labels=labels)\r\n#\r\n# plt.xlabel('')\r\n# plt.ylabel('')\r\n# plt.title('Fatal/Major Injuries Traffic Accidents in Washington DC from 2000-2021')\r\n# plt.show()\r\n\r\n# # Crashes by time of day, ignoring 5 AM because it appears to be default time for REPORTDATE - LNT\r\n# df_time = pd.DataFrame(crash, columns=['REPORTDATE','FATALMAJORINJURIES'])\r\n# df_time['REPORTDATE'] = pd.to_datetime(df_time['REPORTDATE'])\r\n# df_time.set_index(['REPORTDATE'], inplace=True)\r\n# df_time = df_time[(df_time.FATALMAJORINJURIES == 1)]\r\n# df_time['TIME'] = [i.hour for i in df_time.index]\r\n# df_time = df_time[(df_time.TIME != 5)]\r\n# df_time=df_time.groupby(['TIME']).count()\r\n# df_time.reset_index(inplace=True)\r\n# pal1 = sb.color_palette(\"Greens_d\", len(df_time.index))\r\n# df_time['TIME'] = df_time['TIME'] + 1\r\n# sb.barplot(x='TIME', y='FATALMAJORINJURIES', data=df_time,palette=np.array(pal1[::-1])).set_title('Crashes by Time of Day*')\r\n# plt.show()\r\n#\r\n# # Crashes by days of the week\r\n# days = [ 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n# df_time = pd.DataFrame(crash, columns=['REPORTDATE','FATALMAJORINJURIES'])\r\n# df_time['REPORTDATE'] = pd.to_datetime(df_time['REPORTDATE'])\r\n# df_time['WEEKDAY'] = df_time['REPORTDATE'].dt.day_name()\r\n# df_time.set_index(['REPORTDATE'], inplace=True)\r\n# df_time = df_time[(df_time.FATALMAJORINJURIES == 1)]\r\n# df1= pd.DataFrame(df_time.groupby('WEEKDAY').count().reindex(days))\r\n# pal = sb.color_palette(\"Greens_d\", len(df1.index))\r\n# sb.barplot(y=df1.index, x='FATALMAJORINJURIES', data=df1,palette=np.array(pal[::-1])).set_title('Crashes by Day of Week*');\r\n# plt.show()\r\n#\r\n# # Citation: \"Matplotlib.axes.Axes.set_xticks() in Python\". GeeksforGeeks. April 19, 2020. https://www.geeksforgeeks.org/matplotlib-axes-axes-set_xticks-in-python/\r\n# # Top 10 most dangerous days - LNT\r\n# df3 = pd.DataFrame(crash, columns=['REPORTDATE','FATALMAJORINJURIES'])\r\n# df3['REPORTDATE'] = pd.to_datetime(df3['REPORTDATE'])\r\n# df3.set_index(['REPORTDATE'], inplace=True)\r\n# df3['YEAR'] = [i.year for i in df3.index]\r\n# df3['DAYOFYEAR'] = [i.dayofyear for i in df3.index]\r\n# df3 = df3[(df3.FATALMAJORINJURIES == 1)]\r\n# import datetime\r\n# df1= df3.groupby(['DAYOFYEAR','YEAR'],as_index=False).sum()\r\n# df1['DT']=df1.apply(lambda x: datetime.date(int(x.YEAR),1,1)+pd.to_timedelta(x.DAYOFYEAR), axis=1)\r\n# df1 = df1.nlargest(10,'FATALMAJORINJURIES')\r\n# df1=df1[['YEAR', 'DT', 'FATALMAJORINJURIES']].reset_index()\r\n# df1=df1[['YEAR', 'DT', 'FATALMAJORINJURIES']]\r\n# print(df1[['YEAR', 'DT', 'FATALMAJORINJURIES']])\r\n# ### ------------------------------------------------------------------------------------------\r\n# ###\r\n# ### This plot displays a map of DC with fatal/majorinjury crashes overlaid\r\n# ###\r\n#\r\n# # Make geomap to plot where crashes occurred - RR  12 lines, 5 copied, 7 myself\r\n# # change this to directory for boundary file in directory\r\n# # dc_shape = gpd.read_file('/Users/RyeAnne/Documents/School/Spring2021/DataMining/Group Project/Washington_DC_Boundary.shp')\r\n# dc_shape = gpd.read_file(\"Washington_DC_Boundary.shp\")\r\n# # # Make Geoplot of Fatal and NonFatal car crashes in DC - RR 11 copied and modified, 5 wrote own\r\n# crs = {'init':'epsg:4326'}\r\n# geometry=gpd.points_from_xy(crash.LONGITUDE, crash.LATITUDE)\r\n# #geometry = [Point(xy) for xy in zip(crash[\"LONGITUDE\"],crash['LATITUDE'])]\r\n# gdf = gpd.GeoDataFrame(crash, crs=crs, geometry=geometry)\r\n# # #print(gdf.head())\r\n# fig,ax = plt.subplots(figsize = (15,15))\r\n# dc_shape.plot(ax=ax, color = 'grey',alpha=0.5,zorder=1)\r\n# #plt.show()\r\n# gdf[gdf['FATALMAJORINJURIES'] == 1].plot(ax = ax, markersize = 10, color = 'red', marker = '*',label='Fatal/Major Injury',zorder=2)\r\n# # # plot specifications\r\n# plt.title('Crash Fatalities and Major Injuries by GeoLocation')\r\n# plt.legend(bbox_to_anchor=(1.0, .5), prop={'size': 8})\r\n# plt.xlabel('Longitude')\r\n# plt.ylabel('Latitude')\r\n# plt.show()\r\n# # Citation: Steward, Ryan. \"GeoPandas 101: Plot any data with a latitude ad longitude on a map\". Oct 31, 2018. https://towardsdatascience.com/geopandas-101-plot-any-data-with-a-latitude-and-longitude-on-a-map-98e01944b972\r\n\r\n# Get total number of major injuries/fatalities and minor injuries/no injuries\r\n# RR  6 lines, 6 myself\r\nfatal_counts = crash[\"FATALMAJORINJURIES\"].value_counts() # get total counts of fatal/majorinjury and none/minorinjury\r\nfatal_proportions = crash[\"FATALMAJORINJURIES\"].value_counts(normalize=True)  # get the proportions\r\nprint('The number of fatal/major injury and none/minor injury crashes in DC are:')\r\nprint(fatal_counts)  # print total numbers\r\nprint('The proportion of fatal/major injury and none/minor injury crashes in DC are:')\r\nprint(fatal_proportions)  # print proportions\r\n\r\n### ------------------------------------------------------------------------------------------\r\n###\r\n### This part looks at the feature values/categories\r\n###\r\n\r\n# RR 18 lines, 18 myself\r\nprint('The columns of the file are:')\r\nprint(crash.columns)\r\n\r\n# # Feature - Ward\r\n# ward_counts = crash[\"WARD\"].value_counts()\r\n# print(ward_counts)\r\n# # Feature - Age\r\nage_counts = crash[\"AGE\"].value_counts()\r\nprint(age_counts)\r\n# Feature - Total_Vehicles\r\n# vehicle_counts = crash[\"TOTAL_VEHICLES\"].value_counts()\r\n# print(vehicle_counts)\r\n# Feature -  Total_Bicycles\r\n# bicycle_counts = crash[\"TOTAL_BICYCLES\"].value_counts()\r\n# print(bicycle_counts)\r\n# # Feature - Total_Pedestrians\r\n# pedestrian_counts = crash[\"TOTAL_PEDESTRIANS\"].value_counts()\r\n# print(pedestrian_counts)\r\n# # Feature - DriversImpaired\r\n# driversimpaired_counts = crash[\"DRIVERSIMPAIRED\"].value_counts()\r\n# print(driversimpaired_counts)\r\n# # Feature - PedestriansImpaired\r\n# pedestriansimpaired_counts = crash[\"PEDESTRIANSIMPAIRED\"].value_counts()\r\n# print(pedestriansimpaired_counts)\r\n# # Feature - BicyclistsImpaired\r\n# bicyclistsimpaired_counts = crash[\"BICYCLISTSIMPAIRED\"].value_counts()\r\n# print(bicyclistsimpaired_counts)\r\n# Feature - OffIntersection\r\n# offintersection_counts = crash[\"OFFINTERSECTION\"].value_counts()\r\n# print(offintersection_counts)\r\n# Feature - InVehicleType\r\nvehicletype_counts = crash[\"INVEHICLETYPE\"].value_counts()\r\nprint(vehicletype_counts)\r\n# Feature - TicketIssued\r\nticketissued_counts = crash[\"TICKETISSUED\"].value_counts()\r\nprint(ticketissued_counts)\r\n# Feature - LicensePlateState\r\nlicenseplatestate_counts = crash[\"LICENSEPLATESTATE\"].value_counts()\r\nprint(licenseplatestate_counts)\r\n# Feature - Impaired\r\nimpaired_counts = crash[\"IMPAIRED\"].value_counts()\r\nprint(impaired_counts)\r\n# Feature - Speeding\r\nspeeding_counts = crash[\"SPEEDING\"].value_counts()\r\nprint(speeding_counts)\r\n# # Feature - YEAR\r\n# year_counts = crash[\"YEAR\"].value_counts()\r\n# print(year_counts)\r\n# # Feature - MONTH\r\n# month_counts = crash[\"MONTH\"].value_counts()\r\n# print(month_counts)\r\n\r\n# In the Data PreProcessing, we need to decide what to do with the weird ages\r\n# get rid of the 2025 data (2 data points)\r\n# and figure out what to do with the Pu and Am license plates (2 data points)\r\n\r\n# # This portion determines whether features are independent of crash having a fatality/major injury\r\n# # Chi squared tests are performed on each categorical variables to determine independence\r\n#\r\n# # RR - 30 lines, 15 copied and modified, 15 myself\r\n# # Ward\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"WARD\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Ward are:',test_results)\r\n# # Age\r\n# #crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"AGE\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# #print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Age are:',test_results)\r\n# # Total Vehicles\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"TOTAL_VEHICLES\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Total Vehicles are:',test_results)\r\n# # Total Bicycles\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"TOTAL_BICYCLES\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Total Bicycles are:',test_results)\r\n# # Total Pedestrians\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"TOTAL_PEDESTRIANS\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Total Pedestrians are:',test_results)\r\n# # Drivers Impaired\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"DRIVERSIMPAIRED\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Impaired Drivers are:',test_results)\r\n# # Pedestrians Impaired\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"PEDESTRIANSIMPAIRED\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Impaired Pedestrians are:',test_results)\r\n# # Bicyclists Impaired\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"BICYCLISTSIMPAIRED\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Impaired Bicyclists are:',test_results)\r\n# # Intersection\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"OFFINTERSECTION\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Intersection are:',test_results)\r\n# # Vehicle Type\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"INVEHICLETYPE\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Vehicle Type are:',test_results)\r\n# # Ticket Issued\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"TICKETISSUED\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Tickets Issued are:',test_results)\r\n# # Lice Plate State\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"LICENSEPLATESTATE\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and License Plate State are:',test_results)\r\n# # Impaired\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"IMPAIRED\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Impaired are:',test_results)\r\n# # Speeding\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"SPEEDING\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Speeding are:',test_results)\r\n# # Year\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"YEAR\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Year are:',test_results)\r\n# # Month\r\n# crosstab, test_results, expected = rp.crosstab(crash[\"FATALMAJORINJURIES\"], crash[\"MONTH\"],test= \"chi-square\",expected_freqs= True,prop= \"cell\")\r\n# print('The Chi-Squared test results for the relationship between Fatal/Major Injuries and Month are:',test_results)\r\n\r\n# Arianna Start.\r\n\r\n# # Getting major injuries and fatalities by ward. 3/3 lines written by Arianna\r\n# ward_mf = crash.groupby('WARD').agg({'FATALMAJORINJURIES_TOTAL':'sum'})\r\n# print (\"Major injuries and fatalities by ward: \")\r\n# print(ward_mf)\r\n#\r\n# # Getting a bar graph of the results. 5/5 lines written by Arianna.\r\n# teal = '#5ca08e'\r\n# ward_mf_bar = ward_mf.plot.bar(figsize=(20, 10), color=teal)\r\n# plt.ylabel('Major Injuries and Fatalities')\r\n# plt.xlabel('Ward')\r\n# plt.title('Major Injuries and Fatalities by Ward')\r\n# plt.show()\r\n# A note about the results: ward two has the most major injuries and fatalities\r\n\r\n\r\n# Getting summary stats for age. 3/3 lines written by Arianna\r\nage_stats = crash['AGE'].describe()\r\nprint(\"The summary statistics for age are: \")\r\nprint(age_stats)\r\n\r\n# Based on the results of this, this column needs some cleaning (before cleaning max was 237 and min was -7990)\r\n# Deleting rows where age > 122 and where age < 0\r\n# I'm picking 122 as the max because that's the oldest age on record. 2/2 lines written by Arianna\r\nage_filter = (crash.AGE > 122.0) | (crash.AGE < 0.0)\r\ncrash = crash.where(~age_filter)\r\n\r\n# Printing sum stats again to compare. 2/2 line written by Arianna\r\nprint(\"The summary statistics for age(cleaned) are:\")\r\nprint(crash['AGE'].describe())\r\n\r\n# Dropping all rows where a person is listed as a driver\r\n# and is under the age of 10, which seems to be an unreasonable age. 2/2 written by Arianna\r\nage_filter_2 = (crash.PERSONTYPE == 'Driver') & (crash.AGE < 10.0)\r\ncrash = crash.where(~age_filter_2)\r\n\r\n# Checking results to ensure above code worked. 2/2 written by Arianna\r\nprint(\"Minimum AGE by person type: \")\r\nprint(crash.groupby('PERSONTYPE').agg({'AGE': 'min'}))\r\n\r\n\r\n# Getting average age and whether or not the accident resulted in major injury or fatality\r\n# to see if there's any discrepancy from total average. 3/3 lines written by Arianna\r\nmf_age = crash.groupby('FATALMAJORINJURIES').agg({'AGE': 'mean'})\r\nprint(\"Average age involved in accidents with fatalities and major injuries: \")\r\nprint(mf_age)\r\n\r\n# Note about results: about the same\r\n\r\n# Getting a histogram of age 5/5 lines written by Arianna\r\nsns.set_palette('icefire')\r\nage_hist = sns.histplot(data=crash, x='AGE', binwidth=5)\r\nage_hist.set_ylabel('Count')\r\nage_hist.set_xlabel('Age')\r\nage_hist.set_title('Age of People Involved in Traffic Accidents')\r\nplt.show()\r\n\r\n# Getting a histogram of age and accidents with fatality/major injury. 7/7 lines written by Arianna\r\nmf_filter = crash[crash.FATALMAJORINJURIES.eq(1.0)]\r\nage_mf_hist = sns.histplot(data=mf_filter, x='AGE', binwidth=5)\r\nage_mf_hist.set_ylabel('Count')\r\nage_mf_hist.set_xlabel('Age')\r\nage_mf_hist.set_title('Age of People Involved in Traffic Accidents with Fatalities or Major Injuries')\r\nplt.show()\r\n\r\n# Getting the count of crashes with major/fatal per state. 2/2 by Arianna\r\nstates = crash.groupby('LICENSEPLATESTATE').agg({'FATALMAJORINJURIES':'sum'})\r\nprint(\"Crashes per License Plate State:\")\r\nprint(states)\r\n\r\n# Counting total number of crashes from someone with a plate in the DMV and not in the DMV. 13/13 by Arianna\r\ndmv_crash = 0\r\nnon_dmv_crash = 0\r\nno_plate = 0\r\nfor i in crash['LICENSEPLATESTATE']:\r\n    if i == 'DC':\r\n        dmv_crash += 1\r\n    elif i == 'VA':\r\n        dmv_crash += 1\r\n    elif i == 'MD':\r\n        dmv_crash += 1\r\n    elif i == 'None':\r\n        no_plate =+ 1\r\n    else:\r\n        non_dmv_crash += 1\r\nprint(\"Number of crashes from DMV plate: \")\r\nprint(dmv_crash)\r\nprint(\"Number of crashes from non-DMV Plate: \")\r\nprint(non_dmv_crash)\r\n\r\n# Counting total number of crashes from someone with a plate in the DMV and not in the DMV resulting in major/fatal.\r\n# the first 15 lines were remixed and the remainder were all written by Arianna\r\n# Link for remixed code:\r\n# https://stackoverflow.com/questions/53153703/groupby-count-only-when-a-certain-value-is-present-in-one-of-the-column-in-panda\r\ndc_mf = ((crash['LICENSEPLATESTATE'] == 'DC')\r\n            .groupby([crash['FATALMAJORINJURIES']])\r\n            .sum()\r\n            .astype(int)\r\n            .reset_index(name='count'))\r\n\r\n\r\nva_mf = ((crash['LICENSEPLATESTATE'] == 'VA')\r\n            .groupby([crash['FATALMAJORINJURIES']])\r\n            .sum()\r\n            .astype(int)\r\n            .reset_index(name='count'))\r\n\r\nmd_mf = ((crash['LICENSEPLATESTATE'] == 'MD')\r\n            .groupby([crash['FATALMAJORINJURIES']])\r\n            .sum()\r\n            .astype(int)\r\n            .reset_index(name='count'))\r\n\r\ndmv_mf = dc_mf.loc[1] + va_mf.loc[1] + md_mf.loc[1]\r\nprint(\"The total number of accidents with DMV plates resulting in fatalities or major injuries is: \")\r\nprint(dmv_mf.loc['count'])\r\n\r\nfatalmajor = 0\r\nfor row in crash['FATALMAJORINJURIES']:\r\n    if row == 1:\r\n        fatalmajor += 1\r\n    else:\r\n        continue\r\nnon_dmv_mf = fatalmajor - dmv_mf.loc['count'] - no_plate\r\nprint(\"The total number of accident with plates outside of the DMV resulting in fatalities or major injuries is: \")\r\nprint(non_dmv_mf)\r\n\r\n\r\n# Checking for duplicates in PersonID column (dropping nulls before\r\n# I do so to ensure those aren't counted. Duplicates indicate the same person\r\n# being involved in multiple accidents. 5/5 written by Arianna\r\nperson_dup = crash.dropna().loc[crash['PERSONID'].duplicated()]\r\nprint(\"Total number of duplicate PersonIDs: \")\r\nprint(len(person_dup)) # 10\r\nprint(\"List of duplicate PersonIDs: \")\r\nprint(person_dup)\r\n\r\n# Getting summary stats for duplicate persons. 2/2 written by Arianna\r\nprint(\"Summary statistics of duplicate PersonIds: \")\r\nprint(person_dup.describe())\r\n# Notes on results: all resulted in a fatality or major injury. Average age is 34.3\r\n# Although two of the drivers are listed as 0, which can't be correct. We should drop all\r\n# rows where someone is listed as a driver and has an unreasonably young age listed.\r\n\r\n\r\n# Getting person type counts. 3/3 written by Arianna\r\nperson_type = crash.groupby('PERSONTYPE').agg({'PERSONTYPE': 'count'})\r\nprint(\"Person type counts: \")\r\nprint(person_type)\r\n\r\n# Creating bar graph of person type counts.  6/6 written by Arianna\r\nteal = '#5ca08e'\r\nperson_type_bar = person_type.plot.bar(figsize=(20, 10), color=teal)\r\nplt.ylabel('Count')\r\nplt.xlabel('Person Type')\r\nplt.title('Person Type Counts')\r\nplt.show()\r\n\r\n# Getting inury counts of person type. 3/3 written by Arianna\r\nperson_injury = crash.groupby('PERSONTYPE').agg({'FATALMAJORINJURIES': 'sum', 'MINORINJURY': 'count'})\r\nprint(\"Injury counts by person type: \")\r\nprint(person_injury)\r\n\r\n# Creating bar graph to show injury type counts by person. 5/5 written by Arianna\r\n#person_injury_bar = crash.plot.bar(x='PERSONTYPE', y=['FATALMAJORINJURIES', 'MINORINJURY'],figsize=(20, 10), color=teal)\r\n#plt.ylabel('Count')\r\n#plt.xlabel('Person Type')\r\n#plt.title('Injury by Person Type')\r\n#plt.show()\r\n\r\n\r\n# Getting counts for accidents involving speeding. 3/3 written by Arianna\r\nspeeding = crash.groupby('SPEEDING').agg({'FATALMAJORINJURIES': 'sum', 'MINORINJURY': 'count'})\r\nprint('Injury counts for accidents involving speeding: ')\r\nprint(speeding)\r\n\r\n# Getting counts for accidents involving impairment. 3/3 written by Arianna\r\nimpaired = crash.groupby('IMPAIRED').agg({'FATALMAJORINJURIES': 'sum', 'MINORINJURY': 'count'})\r\nprint('Injury counts for accidents involving speeding: ')\r\nprint(impaired)\r\n\r\n# Creating bar chart to show count of accidents with injuries/fatalities based on\r\n# impairment, speeding, and neither\r\n#speed_impaired =\r\n#speed_impaired_bar = crash.plot(x=['SPEEDING', 'IMPAIRED', 'NONE'])\r\n# df.plot(x=\"X\", y=[\"A\", \"B\", \"C\"], kind=\"bar\")\r\n\r\n# Getting counts for accidents where ticket was issued. 3/3 written by Arianna\r\nticket = crash.groupby('TICKETISSUED').agg({'FATALMAJORINJURIES': 'sum', 'MINORINJURY': 'count'})\r\nprint('Injury counts for accidents where a ticket was issued: ')\r\nprint(ticket)\r\n\r\n\r\n# Getting injury counts based on vehicle type. 3/3 written by Arianna\r\nvehicle = crash.groupby('INVEHICLETYPE').agg({'FATALMAJORINJURIES': 'sum', 'MINORINJURY': 'count'})\r\nprint(\"Injury counts by vehicle type: \")\r\nprint(vehicle)\r\n\r\n# Getting pie chart to show vehicle type break down\r\nvehicle_counts = crash.groupby('INVEHICLETYPE').agg({'INVEHICLETYPE': 'count'})\r\nvehicle_chart = vehicle_counts.plot.pie(y='INVEHICLETYPE', figsize=(20,20))\r\nplt.ylabel('Vehicle Type')\r\nplt.title('Types of Vehicles Involved in Accidents')\r\nplt.show()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/eda.py b/eda.py
--- a/eda.py	(revision a0265299b22d300938dede1ac4c16a53c6b15eb0)
+++ b/eda.py	(date 1618584042900)
@@ -362,6 +362,27 @@
 age_mf_hist.set_title('Age of People Involved in Traffic Accidents with Fatalities or Major Injuries')
 plt.show()
 
+
+# Overlaying two histograms - Lydia
+sns.set_palette('icefire')
+#mf_filter1 = crash[crash.FATALMAJORINJURIES.eq(0.0)]
+#age_hist = sns.histplot(data=mf_filter1, x='AGE', binwidth=5, alpha = 0.5)
+#age_hist.set_ylabel('Count')
+#age_hist.set_xlabel('Age')
+#age_hist.set_title('Age of People Involved in Traffic Accidents')
+#plt.show()
+
+# Getting a histogram of age and accidents with fatality/major injury. 7/7 lines written by Arianna
+#mf_filter = crash[crash.FATALMAJORINJURIES.eq(1.0)]
+#age_mf_hist = sns.histplot(data=mf_filter, x='AGE', binwidth=5,alpha = 0.5)
+#age_mf_hist.set_ylabel('Count')
+#age_mf_hist.set_xlabel('Age')
+#age_mf_hist.set_title('Age of People Involved in Traffic Accidents with Fatalities or Major Injuries')
+sns.catplot(x="AGE", col="FATALMAJORINJURIES", col_wrap=4,
+                data=crash[crash.AGE.notnull()],
+                kind="count", height=2.5, aspect=.8)
+plt.show()
+
 # Getting the count of crashes with major/fatal per state. 2/2 by Arianna
 states = crash.groupby('LICENSEPLATESTATE').agg({'FATALMAJORINJURIES':'sum'})
 print("Crashes per License Plate State:")
